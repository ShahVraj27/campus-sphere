{"ast":null,"code":"import axios from'axios';// Create an axios instance\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:8000/api',headers:{'Content-Type':'application/json'}});// Add a request interceptor to add auth token to requests\napi.interceptors.request.use(config=>{const token=localStorage.getItem('accessToken');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>Promise.reject(error));// Add a response interceptor to handle token refresh\napi.interceptors.response.use(response=>response,async error=>{const originalRequest=error.config;// If error is 401 and not a retry, attempt to refresh token\nif(error.response.status===401&&!originalRequest._retry){originalRequest._retry=true;try{const refreshToken=localStorage.getItem('refreshToken');if(!refreshToken){// No refresh token, logout\nlocalStorage.removeItem('accessToken');localStorage.removeItem('refreshToken');return Promise.reject(error);}// Attempt to refresh token\nconst response=await axios.post(`${api.defaults.baseURL}/auth/token/refresh/`,{refresh:refreshToken},{headers:{'Content-Type':'application/json'}});const newAccessToken=response.data.access;localStorage.setItem('accessToken',newAccessToken);// Retry original request with new token\noriginalRequest.headers.Authorization=`Bearer ${newAccessToken}`;return axios(originalRequest);}catch(refreshError){// Refresh failed, logout\nlocalStorage.removeItem('accessToken');localStorage.removeItem('refreshToken');return Promise.reject(refreshError);}}return Promise.reject(error);});export default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","removeItem","post","defaults","refresh","newAccessToken","data","access","setItem","refreshError"],"sources":["C:/Vraj/Academics/2-2/DBMS/trial/campus-sphere/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor to add auth token to requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add a response interceptor to handle token refresh\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // If error is 401 and not a retry, attempt to refresh token\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        if (!refreshToken) {\r\n          // No refresh token, logout\r\n          localStorage.removeItem('accessToken');\r\n          localStorage.removeItem('refreshToken');\r\n          return Promise.reject(error);\r\n        }\r\n        \r\n        // Attempt to refresh token\r\n        const response = await axios.post(\r\n          `${api.defaults.baseURL}/auth/token/refresh/`,\r\n          { refresh: refreshToken },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n        \r\n        const newAccessToken = response.data.access;\r\n        localStorage.setItem('accessToken', newAccessToken);\r\n        \r\n        // Retry original request with new token\r\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n        return axios(originalRequest);\r\n      } catch (refreshError) {\r\n        // Refresh failed, logout\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('refreshToken');\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,GAAG,CAAGD,KAAK,CAACE,MAAM,CAAC,CACvBC,OAAO,CAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,2BAA2B,CACrEC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,EAAK,CACV,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CACjD,GAAIF,KAAK,CAAE,CACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,CAAG,UAAUH,KAAK,EAAE,CAClD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CACAK,KAAK,EAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC,CAED;AACAf,GAAG,CAACO,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,EAAKA,QAAQ,CACtB,KAAO,CAAAH,KAAK,EAAK,CACf,KAAM,CAAAI,eAAe,CAAGJ,KAAK,CAACL,MAAM,CAEpC;AACA,GAAIK,KAAK,CAACG,QAAQ,CAACE,MAAM,GAAK,GAAG,EAAI,CAACD,eAAe,CAACE,MAAM,CAAE,CAC5DF,eAAe,CAACE,MAAM,CAAG,IAAI,CAE7B,GAAI,CACF,KAAM,CAAAC,YAAY,CAAGV,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CACzD,GAAI,CAACS,YAAY,CAAE,CACjB;AACAV,YAAY,CAACW,UAAU,CAAC,aAAa,CAAC,CACtCX,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC,CACvC,MAAO,CAAAP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CAEA;AACA,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAnB,KAAK,CAACyB,IAAI,CAC/B,GAAGxB,GAAG,CAACyB,QAAQ,CAACvB,OAAO,sBAAsB,CAC7C,CAAEwB,OAAO,CAAEJ,YAAa,CAAC,CACzB,CAAEhB,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAE,CACpD,CAAC,CAED,KAAM,CAAAqB,cAAc,CAAGT,QAAQ,CAACU,IAAI,CAACC,MAAM,CAC3CjB,YAAY,CAACkB,OAAO,CAAC,aAAa,CAAEH,cAAc,CAAC,CAEnD;AACAR,eAAe,CAACb,OAAO,CAACQ,aAAa,CAAG,UAAUa,cAAc,EAAE,CAClE,MAAO,CAAA5B,KAAK,CAACoB,eAAe,CAAC,CAC/B,CAAE,MAAOY,YAAY,CAAE,CACrB;AACAnB,YAAY,CAACW,UAAU,CAAC,aAAa,CAAC,CACtCX,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC,CACvC,MAAO,CAAAP,OAAO,CAACC,MAAM,CAACc,YAAY,CAAC,CACrC,CACF,CAEA,MAAO,CAAAf,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,cAAe,CAAAf,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}