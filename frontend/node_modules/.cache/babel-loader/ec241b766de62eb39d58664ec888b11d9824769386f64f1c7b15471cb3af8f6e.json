{"ast":null,"code":"import api from'./api';// Event service functions for API calls\nconst eventService={// Get all events\ngetAllEvents:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return api.get('/events/',{params});},// Get events by club\ngetEventsByClub:async club=>{return api.get(`/events/?club=${club}`);},// Get events by date range\ngetEventsByDateRange:async(fromDate,toDate)=>{return api.get(`/events/?from_date=${fromDate}&to_date=${toDate}`);},// Get event by ID\ngetEventById:async id=>{return api.get(`/events/${id}/`);},// Get event participants\ngetEventParticipants:async id=>{return api.get(`/events/${id}/participants/`);},// Create event\ncreateEvent:async eventData=>{return api.post('/events/',eventData);},// Update event\nupdateEvent:async(id,eventData)=>{return api.put(`/events/${id}/`,eventData);},// Delete event\ndeleteEvent:async id=>{return api.delete(`/events/${id}/`);},// Register for event\nregisterForEvent:async id=>{return api.post(`/events/${id}/register/`);},// Unregister from event\nunregisterFromEvent:async id=>{return api.post(`/events/${id}/unregister/`);},// Get user's event participations\ngetUserEvents:async()=>{return api.get('/event-participations/my_events/');},// Get all event participations\ngetAllEventParticipations:async()=>{return api.get('/event-participations/');},// Get event participations by event\ngetEventParticipationsByEvent:async eventId=>{return api.get(`/event-participations/?event=${eventId}`);},// Get event participations by user\ngetEventParticipationsByUser:async userId=>{return api.get(`/event-participations/?user=${userId}`);},// Create event participation (admin only)\ncreateEventParticipation:async participationData=>{return api.post('/event-participations/',participationData);},// Update event participation (mark as attended)\nupdateEventParticipation:async(id,participationData)=>{return api.put(`/event-participations/${id}/`,participationData);},// Delete event participation (admin only)\ndeleteEventParticipation:async id=>{return api.delete(`/event-participations/${id}/`);}};export default eventService;","map":{"version":3,"names":["api","eventService","getAllEvents","params","arguments","length","undefined","get","getEventsByClub","club","getEventsByDateRange","fromDate","toDate","getEventById","id","getEventParticipants","createEvent","eventData","post","updateEvent","put","deleteEvent","delete","registerForEvent","unregisterFromEvent","getUserEvents","getAllEventParticipations","getEventParticipationsByEvent","eventId","getEventParticipationsByUser","userId","createEventParticipation","participationData","updateEventParticipation","deleteEventParticipation"],"sources":["C:/Vraj/Academics/2-2/DBMS/trial/campus-sphere/frontend/src/services/event.service.js"],"sourcesContent":["import api from './api';\r\n\r\n// Event service functions for API calls\r\nconst eventService = {\r\n  // Get all events\r\n  getAllEvents: async (params = {}) => {\r\n    return api.get('/events/', { params });\r\n  },\r\n  \r\n  // Get events by club\r\n  getEventsByClub: async (club) => {\r\n    return api.get(`/events/?club=${club}`);\r\n  },\r\n  \r\n  // Get events by date range\r\n  getEventsByDateRange: async (fromDate, toDate) => {\r\n    return api.get(`/events/?from_date=${fromDate}&to_date=${toDate}`);\r\n  },\r\n  \r\n  // Get event by ID\r\n  getEventById: async (id) => {\r\n    return api.get(`/events/${id}/`);\r\n  },\r\n  \r\n  // Get event participants\r\n  getEventParticipants: async (id) => {\r\n    return api.get(`/events/${id}/participants/`);\r\n  },\r\n  \r\n  // Create event\r\n  createEvent: async (eventData) => {\r\n    return api.post('/events/', eventData);\r\n  },\r\n  \r\n  // Update event\r\n  updateEvent: async (id, eventData) => {\r\n    return api.put(`/events/${id}/`, eventData);\r\n  },\r\n  \r\n  // Delete event\r\n  deleteEvent: async (id) => {\r\n    return api.delete(`/events/${id}/`);\r\n  },\r\n  \r\n  // Register for event\r\n  registerForEvent: async (id) => {\r\n    return api.post(`/events/${id}/register/`);\r\n  },\r\n  \r\n  // Unregister from event\r\n  unregisterFromEvent: async (id) => {\r\n    return api.post(`/events/${id}/unregister/`);\r\n  },\r\n  \r\n  // Get user's event participations\r\n  getUserEvents: async () => {\r\n    return api.get('/event-participations/my_events/');\r\n  },\r\n  \r\n  // Get all event participations\r\n  getAllEventParticipations: async () => {\r\n    return api.get('/event-participations/');\r\n  },\r\n  \r\n  // Get event participations by event\r\n  getEventParticipationsByEvent: async (eventId) => {\r\n    return api.get(`/event-participations/?event=${eventId}`);\r\n  },\r\n  \r\n  // Get event participations by user\r\n  getEventParticipationsByUser: async (userId) => {\r\n    return api.get(`/event-participations/?user=${userId}`);\r\n  },\r\n  \r\n  // Create event participation (admin only)\r\n  createEventParticipation: async (participationData) => {\r\n    return api.post('/event-participations/', participationData);\r\n  },\r\n  \r\n  // Update event participation (mark as attended)\r\n  updateEventParticipation: async (id, participationData) => {\r\n    return api.put(`/event-participations/${id}/`, participationData);\r\n  },\r\n  \r\n  // Delete event participation (admin only)\r\n  deleteEventParticipation: async (id) => {\r\n    return api.delete(`/event-participations/${id}/`);\r\n  },\r\n};\r\n\r\nexport default eventService;"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAEvB;AACA,KAAM,CAAAC,YAAY,CAAG,CACnB;AACAC,YAAY,CAAE,cAAAA,CAAA,CAAuB,IAAhB,CAAAC,MAAM,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAC9B,MAAO,CAAAJ,GAAG,CAACO,GAAG,CAAC,UAAU,CAAE,CAAEJ,MAAO,CAAC,CAAC,CACxC,CAAC,CAED;AACAK,eAAe,CAAE,KAAO,CAAAC,IAAI,EAAK,CAC/B,MAAO,CAAAT,GAAG,CAACO,GAAG,CAAC,iBAAiBE,IAAI,EAAE,CAAC,CACzC,CAAC,CAED;AACAC,oBAAoB,CAAE,KAAAA,CAAOC,QAAQ,CAAEC,MAAM,GAAK,CAChD,MAAO,CAAAZ,GAAG,CAACO,GAAG,CAAC,sBAAsBI,QAAQ,YAAYC,MAAM,EAAE,CAAC,CACpE,CAAC,CAED;AACAC,YAAY,CAAE,KAAO,CAAAC,EAAE,EAAK,CAC1B,MAAO,CAAAd,GAAG,CAACO,GAAG,CAAC,WAAWO,EAAE,GAAG,CAAC,CAClC,CAAC,CAED;AACAC,oBAAoB,CAAE,KAAO,CAAAD,EAAE,EAAK,CAClC,MAAO,CAAAd,GAAG,CAACO,GAAG,CAAC,WAAWO,EAAE,gBAAgB,CAAC,CAC/C,CAAC,CAED;AACAE,WAAW,CAAE,KAAO,CAAAC,SAAS,EAAK,CAChC,MAAO,CAAAjB,GAAG,CAACkB,IAAI,CAAC,UAAU,CAAED,SAAS,CAAC,CACxC,CAAC,CAED;AACAE,WAAW,CAAE,KAAAA,CAAOL,EAAE,CAAEG,SAAS,GAAK,CACpC,MAAO,CAAAjB,GAAG,CAACoB,GAAG,CAAC,WAAWN,EAAE,GAAG,CAAEG,SAAS,CAAC,CAC7C,CAAC,CAED;AACAI,WAAW,CAAE,KAAO,CAAAP,EAAE,EAAK,CACzB,MAAO,CAAAd,GAAG,CAACsB,MAAM,CAAC,WAAWR,EAAE,GAAG,CAAC,CACrC,CAAC,CAED;AACAS,gBAAgB,CAAE,KAAO,CAAAT,EAAE,EAAK,CAC9B,MAAO,CAAAd,GAAG,CAACkB,IAAI,CAAC,WAAWJ,EAAE,YAAY,CAAC,CAC5C,CAAC,CAED;AACAU,mBAAmB,CAAE,KAAO,CAAAV,EAAE,EAAK,CACjC,MAAO,CAAAd,GAAG,CAACkB,IAAI,CAAC,WAAWJ,EAAE,cAAc,CAAC,CAC9C,CAAC,CAED;AACAW,aAAa,CAAE,KAAAA,CAAA,GAAY,CACzB,MAAO,CAAAzB,GAAG,CAACO,GAAG,CAAC,kCAAkC,CAAC,CACpD,CAAC,CAED;AACAmB,yBAAyB,CAAE,KAAAA,CAAA,GAAY,CACrC,MAAO,CAAA1B,GAAG,CAACO,GAAG,CAAC,wBAAwB,CAAC,CAC1C,CAAC,CAED;AACAoB,6BAA6B,CAAE,KAAO,CAAAC,OAAO,EAAK,CAChD,MAAO,CAAA5B,GAAG,CAACO,GAAG,CAAC,gCAAgCqB,OAAO,EAAE,CAAC,CAC3D,CAAC,CAED;AACAC,4BAA4B,CAAE,KAAO,CAAAC,MAAM,EAAK,CAC9C,MAAO,CAAA9B,GAAG,CAACO,GAAG,CAAC,+BAA+BuB,MAAM,EAAE,CAAC,CACzD,CAAC,CAED;AACAC,wBAAwB,CAAE,KAAO,CAAAC,iBAAiB,EAAK,CACrD,MAAO,CAAAhC,GAAG,CAACkB,IAAI,CAAC,wBAAwB,CAAEc,iBAAiB,CAAC,CAC9D,CAAC,CAED;AACAC,wBAAwB,CAAE,KAAAA,CAAOnB,EAAE,CAAEkB,iBAAiB,GAAK,CACzD,MAAO,CAAAhC,GAAG,CAACoB,GAAG,CAAC,yBAAyBN,EAAE,GAAG,CAAEkB,iBAAiB,CAAC,CACnE,CAAC,CAED;AACAE,wBAAwB,CAAE,KAAO,CAAApB,EAAE,EAAK,CACtC,MAAO,CAAAd,GAAG,CAACsB,MAAM,CAAC,yBAAyBR,EAAE,GAAG,CAAC,CACnD,CACF,CAAC,CAED,cAAe,CAAAb,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}