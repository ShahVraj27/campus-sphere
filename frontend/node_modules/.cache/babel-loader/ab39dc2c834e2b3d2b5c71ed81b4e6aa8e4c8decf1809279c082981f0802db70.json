{"ast":null,"code":"import api from './api';\n\n// Event service functions for API calls\nconst eventService = {\n  // Get all events\n  getAllEvents: async (params = {}) => {\n    return api.get('/events/', {\n      params\n    });\n  },\n  // Get events by club\n  getEventsByClub: async club => {\n    return api.get(`/events/?club=${club}`);\n  },\n  // Get events by date range\n  getEventsByDateRange: async (fromDate, toDate) => {\n    return api.get(`/events/?from_date=${fromDate}&to_date=${toDate}`);\n  },\n  // Get event by ID\n  getEventById: async id => {\n    return api.get(`/events/${id}/`);\n  },\n  // Get event participants\n  getEventParticipants: async id => {\n    return api.get(`/events/${id}/participants/`);\n  },\n  // Create event\n  createEvent: async eventData => {\n    return api.post('/events/', eventData);\n  },\n  // Update event\n  updateEvent: async (id, eventData) => {\n    return api.put(`/events/${id}/`, eventData);\n  },\n  // Delete event\n  deleteEvent: async id => {\n    return api.delete(`/events/${id}/`);\n  },\n  // Register for event\n  registerForEvent: async id => {\n    return api.post(`/events/${id}/register/`);\n  },\n  // Unregister from event\n  unregisterFromEvent: async id => {\n    return api.post(`/events/${id}/unregister/`);\n  },\n  // Get user's event participations\n  getUserEvents: async () => {\n    return api.get('/event-participations/my_events/');\n  },\n  // Get all event participations\n  getAllEventParticipations: async () => {\n    return api.get('/event-participations/');\n  },\n  // Get event participations by event\n  getEventParticipationsByEvent: async eventId => {\n    return api.get(`/event-participations/?event=${eventId}`);\n  },\n  // Get event participations by user\n  getEventParticipationsByUser: async userId => {\n    return api.get(`/event-participations/?user=${userId}`);\n  },\n  // Create event participation (admin only)\n  createEventParticipation: async participationData => {\n    return api.post('/event-participations/', participationData);\n  },\n  // Update event participation (mark as attended)\n  updateEventParticipation: async (id, participationData) => {\n    return api.put(`/event-participations/${id}/`, participationData);\n  },\n  // Delete event participation (admin only)\n  deleteEventParticipation: async id => {\n    return api.delete(`/event-participations/${id}/`);\n  }\n};\nexport default eventService;","map":{"version":3,"names":["api","eventService","getAllEvents","params","get","getEventsByClub","club","getEventsByDateRange","fromDate","toDate","getEventById","id","getEventParticipants","createEvent","eventData","post","updateEvent","put","deleteEvent","delete","registerForEvent","unregisterFromEvent","getUserEvents","getAllEventParticipations","getEventParticipationsByEvent","eventId","getEventParticipationsByUser","userId","createEventParticipation","participationData","updateEventParticipation","deleteEventParticipation"],"sources":["C:/Vraj/Academics/2-2/DBMS/trial/campus-sphere/frontend/src/services/event.service.js"],"sourcesContent":["import api from './api';\r\n\r\n// Event service functions for API calls\r\nconst eventService = {\r\n  // Get all events\r\n  getAllEvents: async (params = {}) => {\r\n    return api.get('/events/', { params });\r\n  },\r\n  \r\n  // Get events by club\r\n  getEventsByClub: async (club) => {\r\n    return api.get(`/events/?club=${club}`);\r\n  },\r\n  \r\n  // Get events by date range\r\n  getEventsByDateRange: async (fromDate, toDate) => {\r\n    return api.get(`/events/?from_date=${fromDate}&to_date=${toDate}`);\r\n  },\r\n  \r\n  // Get event by ID\r\n  getEventById: async (id) => {\r\n    return api.get(`/events/${id}/`);\r\n  },\r\n  \r\n  // Get event participants\r\n  getEventParticipants: async (id) => {\r\n    return api.get(`/events/${id}/participants/`);\r\n  },\r\n  \r\n  // Create event\r\n  createEvent: async (eventData) => {\r\n    return api.post('/events/', eventData);\r\n  },\r\n  \r\n  // Update event\r\n  updateEvent: async (id, eventData) => {\r\n    return api.put(`/events/${id}/`, eventData);\r\n  },\r\n  \r\n  // Delete event\r\n  deleteEvent: async (id) => {\r\n    return api.delete(`/events/${id}/`);\r\n  },\r\n  \r\n  // Register for event\r\n  registerForEvent: async (id) => {\r\n    return api.post(`/events/${id}/register/`);\r\n  },\r\n  \r\n  // Unregister from event\r\n  unregisterFromEvent: async (id) => {\r\n    return api.post(`/events/${id}/unregister/`);\r\n  },\r\n  \r\n  // Get user's event participations\r\n  getUserEvents: async () => {\r\n    return api.get('/event-participations/my_events/');\r\n  },\r\n  \r\n  // Get all event participations\r\n  getAllEventParticipations: async () => {\r\n    return api.get('/event-participations/');\r\n  },\r\n  \r\n  // Get event participations by event\r\n  getEventParticipationsByEvent: async (eventId) => {\r\n    return api.get(`/event-participations/?event=${eventId}`);\r\n  },\r\n  \r\n  // Get event participations by user\r\n  getEventParticipationsByUser: async (userId) => {\r\n    return api.get(`/event-participations/?user=${userId}`);\r\n  },\r\n  \r\n  // Create event participation (admin only)\r\n  createEventParticipation: async (participationData) => {\r\n    return api.post('/event-participations/', participationData);\r\n  },\r\n  \r\n  // Update event participation (mark as attended)\r\n  updateEventParticipation: async (id, participationData) => {\r\n    return api.put(`/event-participations/${id}/`, participationData);\r\n  },\r\n  \r\n  // Delete event participation (admin only)\r\n  deleteEventParticipation: async (id) => {\r\n    return api.delete(`/event-participations/${id}/`);\r\n  },\r\n};\r\n\r\nexport default eventService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA,MAAMC,YAAY,GAAG;EACnB;EACAC,YAAY,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IACnC,OAAOH,GAAG,CAACI,GAAG,CAAC,UAAU,EAAE;MAAED;IAAO,CAAC,CAAC;EACxC,CAAC;EAED;EACAE,eAAe,EAAE,MAAOC,IAAI,IAAK;IAC/B,OAAON,GAAG,CAACI,GAAG,CAAC,iBAAiBE,IAAI,EAAE,CAAC;EACzC,CAAC;EAED;EACAC,oBAAoB,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,KAAK;IAChD,OAAOT,GAAG,CAACI,GAAG,CAAC,sBAAsBI,QAAQ,YAAYC,MAAM,EAAE,CAAC;EACpE,CAAC;EAED;EACAC,YAAY,EAAE,MAAOC,EAAE,IAAK;IAC1B,OAAOX,GAAG,CAACI,GAAG,CAAC,WAAWO,EAAE,GAAG,CAAC;EAClC,CAAC;EAED;EACAC,oBAAoB,EAAE,MAAOD,EAAE,IAAK;IAClC,OAAOX,GAAG,CAACI,GAAG,CAAC,WAAWO,EAAE,gBAAgB,CAAC;EAC/C,CAAC;EAED;EACAE,WAAW,EAAE,MAAOC,SAAS,IAAK;IAChC,OAAOd,GAAG,CAACe,IAAI,CAAC,UAAU,EAAED,SAAS,CAAC;EACxC,CAAC;EAED;EACAE,WAAW,EAAE,MAAAA,CAAOL,EAAE,EAAEG,SAAS,KAAK;IACpC,OAAOd,GAAG,CAACiB,GAAG,CAAC,WAAWN,EAAE,GAAG,EAAEG,SAAS,CAAC;EAC7C,CAAC;EAED;EACAI,WAAW,EAAE,MAAOP,EAAE,IAAK;IACzB,OAAOX,GAAG,CAACmB,MAAM,CAAC,WAAWR,EAAE,GAAG,CAAC;EACrC,CAAC;EAED;EACAS,gBAAgB,EAAE,MAAOT,EAAE,IAAK;IAC9B,OAAOX,GAAG,CAACe,IAAI,CAAC,WAAWJ,EAAE,YAAY,CAAC;EAC5C,CAAC;EAED;EACAU,mBAAmB,EAAE,MAAOV,EAAE,IAAK;IACjC,OAAOX,GAAG,CAACe,IAAI,CAAC,WAAWJ,EAAE,cAAc,CAAC;EAC9C,CAAC;EAED;EACAW,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,OAAOtB,GAAG,CAACI,GAAG,CAAC,kCAAkC,CAAC;EACpD,CAAC;EAED;EACAmB,yBAAyB,EAAE,MAAAA,CAAA,KAAY;IACrC,OAAOvB,GAAG,CAACI,GAAG,CAAC,wBAAwB,CAAC;EAC1C,CAAC;EAED;EACAoB,6BAA6B,EAAE,MAAOC,OAAO,IAAK;IAChD,OAAOzB,GAAG,CAACI,GAAG,CAAC,gCAAgCqB,OAAO,EAAE,CAAC;EAC3D,CAAC;EAED;EACAC,4BAA4B,EAAE,MAAOC,MAAM,IAAK;IAC9C,OAAO3B,GAAG,CAACI,GAAG,CAAC,+BAA+BuB,MAAM,EAAE,CAAC;EACzD,CAAC;EAED;EACAC,wBAAwB,EAAE,MAAOC,iBAAiB,IAAK;IACrD,OAAO7B,GAAG,CAACe,IAAI,CAAC,wBAAwB,EAAEc,iBAAiB,CAAC;EAC9D,CAAC;EAED;EACAC,wBAAwB,EAAE,MAAAA,CAAOnB,EAAE,EAAEkB,iBAAiB,KAAK;IACzD,OAAO7B,GAAG,CAACiB,GAAG,CAAC,yBAAyBN,EAAE,GAAG,EAAEkB,iBAAiB,CAAC;EACnE,CAAC;EAED;EACAE,wBAAwB,EAAE,MAAOpB,EAAE,IAAK;IACtC,OAAOX,GAAG,CAACmB,MAAM,CAAC,yBAAyBR,EAAE,GAAG,CAAC;EACnD;AACF,CAAC;AAED,eAAeV,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}