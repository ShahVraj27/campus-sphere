{"ast":null,"code":"import api from './api';\n\n// Chat service functions for API calls\nconst chatService = {\n  // Get all chats for current user\n  getUserChats: async () => {\n    return api.get('/chats/');\n  },\n  // Get chat by ID\n  getChatById: async id => {\n    return api.get(`/chats/${id}/`);\n  },\n  // Get chat messages\n  getChatMessages: async id => {\n    return api.get(`/chats/${id}/messages/`);\n  },\n  // Create direct chat\n  createDirectChat: async participantId => {\n    return api.post('/chats/', {\n      participants: [participantId],\n      is_group_chat: false\n    });\n  },\n  // Create group chat\n  createGroupChat: async (name, participantIds) => {\n    return api.post('/chats/', {\n      participants: participantIds,\n      is_group_chat: true,\n      group_name: name\n    });\n  },\n  // Add participant to group chat\n  addParticipant: async (chatId, userId) => {\n    return api.post(`/chats/${chatId}/add_participant/`, {\n      user_id: userId\n    });\n  },\n  // Remove participant from group chat\n  removeParticipant: async (chatId, userId) => {\n    return api.post(`/chats/${chatId}/remove_participant/`, {\n      user_id: userId\n    });\n  },\n  // Leave group chat\n  leaveChat: async chatId => {\n    return api.post(`/chats/${chatId}/leave/`);\n  },\n  // Delete chat\n  deleteChat: async id => {\n    return api.delete(`/chats/${id}/`);\n  },\n  // Send message\n  sendMessage: async (chatId, content) => {\n    return api.post('/messages/', {\n      chat: chatId,\n      content\n    });\n  },\n  // Get all messages\n  getAllMessages: async () => {\n    return api.get('/messages/');\n  },\n  // Get message by ID\n  getMessageById: async id => {\n    return api.get(`/messages/${id}/`);\n  },\n  // Update message\n  updateMessage: async (id, content) => {\n    return api.put(`/messages/${id}/`, {\n      content\n    });\n  },\n  // Delete message\n  deleteMessage: async id => {\n    return api.delete(`/messages/${id}/`);\n  },\n  // Mark messages as read\n  markMessagesAsRead: async messageIds => {\n    return api.post('/messages/mark_read/', {\n      message_ids: messageIds\n    });\n  },\n  // Get group chat details\n  getGroupChatDetails: async chatId => {\n    return api.get(`/group-chats/${chatId}/`);\n  },\n  // Update group chat\n  updateGroupChat: async (chatId, name) => {\n    return api.put(`/group-chats/${chatId}/`, {\n      name\n    });\n  },\n  // Transfer group chat admin\n  transferGroupChatAdmin: async (chatId, newAdminId) => {\n    return api.post(`/group-chats/${chatId}/transfer_admin/`, {\n      new_admin_id: newAdminId\n    });\n  }\n};\nexport default chatService;","map":{"version":3,"names":["api","chatService","getUserChats","get","getChatById","id","getChatMessages","createDirectChat","participantId","post","participants","is_group_chat","createGroupChat","name","participantIds","group_name","addParticipant","chatId","userId","user_id","removeParticipant","leaveChat","deleteChat","delete","sendMessage","content","chat","getAllMessages","getMessageById","updateMessage","put","deleteMessage","markMessagesAsRead","messageIds","message_ids","getGroupChatDetails","updateGroupChat","transferGroupChatAdmin","newAdminId","new_admin_id"],"sources":["C:/Vraj/Academics/2-2/DBMS/trial/campus-sphere/frontend/src/services/chat.service.js"],"sourcesContent":["import api from './api';\r\n\r\n// Chat service functions for API calls\r\nconst chatService = {\r\n  // Get all chats for current user\r\n  getUserChats: async () => {\r\n    return api.get('/chats/');\r\n  },\r\n  \r\n  // Get chat by ID\r\n  getChatById: async (id) => {\r\n    return api.get(`/chats/${id}/`);\r\n  },\r\n  \r\n  // Get chat messages\r\n  getChatMessages: async (id) => {\r\n    return api.get(`/chats/${id}/messages/`);\r\n  },\r\n  \r\n  // Create direct chat\r\n  createDirectChat: async (participantId) => {\r\n    return api.post('/chats/', {\r\n      participants: [participantId],\r\n      is_group_chat: false\r\n    });\r\n  },\r\n  \r\n  // Create group chat\r\n  createGroupChat: async (name, participantIds) => {\r\n    return api.post('/chats/', {\r\n      participants: participantIds,\r\n      is_group_chat: true,\r\n      group_name: name\r\n    });\r\n  },\r\n  \r\n  // Add participant to group chat\r\n  addParticipant: async (chatId, userId) => {\r\n    return api.post(`/chats/${chatId}/add_participant/`, {\r\n      user_id: userId\r\n    });\r\n  },\r\n  \r\n  // Remove participant from group chat\r\n  removeParticipant: async (chatId, userId) => {\r\n    return api.post(`/chats/${chatId}/remove_participant/`, {\r\n      user_id: userId\r\n    });\r\n  },\r\n  \r\n  // Leave group chat\r\n  leaveChat: async (chatId) => {\r\n    return api.post(`/chats/${chatId}/leave/`);\r\n  },\r\n  \r\n  // Delete chat\r\n  deleteChat: async (id) => {\r\n    return api.delete(`/chats/${id}/`);\r\n  },\r\n  \r\n  // Send message\r\n  sendMessage: async (chatId, content) => {\r\n    return api.post('/messages/', {\r\n      chat: chatId,\r\n      content\r\n    });\r\n  },\r\n  \r\n  // Get all messages\r\n  getAllMessages: async () => {\r\n    return api.get('/messages/');\r\n  },\r\n  \r\n  // Get message by ID\r\n  getMessageById: async (id) => {\r\n    return api.get(`/messages/${id}/`);\r\n  },\r\n  \r\n  // Update message\r\n  updateMessage: async (id, content) => {\r\n    return api.put(`/messages/${id}/`, { content });\r\n  },\r\n  \r\n  // Delete message\r\n  deleteMessage: async (id) => {\r\n    return api.delete(`/messages/${id}/`);\r\n  },\r\n  \r\n  // Mark messages as read\r\n  markMessagesAsRead: async (messageIds) => {\r\n    return api.post('/messages/mark_read/', { message_ids: messageIds });\r\n  },\r\n  \r\n  // Get group chat details\r\n  getGroupChatDetails: async (chatId) => {\r\n    return api.get(`/group-chats/${chatId}/`);\r\n  },\r\n  \r\n  // Update group chat\r\n  updateGroupChat: async (chatId, name) => {\r\n    return api.put(`/group-chats/${chatId}/`, { name });\r\n  },\r\n  \r\n  // Transfer group chat admin\r\n  transferGroupChatAdmin: async (chatId, newAdminId) => {\r\n    return api.post(`/group-chats/${chatId}/transfer_admin/`, {\r\n      new_admin_id: newAdminId\r\n    });\r\n  },\r\n};\r\n\r\nexport default chatService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}