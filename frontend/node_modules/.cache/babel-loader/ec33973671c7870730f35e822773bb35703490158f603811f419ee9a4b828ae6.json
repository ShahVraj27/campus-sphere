{"ast":null,"code":"import api from './api';\n\n// Hostel service functions for API calls\nconst hostelService = {\n  // Get all hostels\n  getAllHostels: async () => {\n    return api.get('/hostels/');\n  },\n  // Get hostel by ID\n  getHostelById: async id => {\n    return api.get(`/hostels/${id}/`);\n  },\n  // Get hostel rooms\n  getHostelRooms: async id => {\n    return api.get(`/hostels/${id}/rooms/`);\n  },\n  // Create hostel (admin only)\n  createHostel: async hostelData => {\n    return api.post('/hostels/', hostelData);\n  },\n  // Update hostel (admin only)\n  updateHostel: async (id, hostelData) => {\n    return api.put(`/hostels/${id}/`, hostelData);\n  },\n  // Delete hostel (admin only)\n  deleteHostel: async id => {\n    return api.delete(`/hostels/${id}/`);\n  },\n  // Get all rooms\n  getAllRooms: async () => {\n    return api.get('/rooms/');\n  },\n  // Get rooms by hostel\n  getRoomsByHostel: async hostelId => {\n    return api.get(`/rooms/?hostel=${hostelId}`);\n  },\n  // Get room by ID\n  getRoomById: async id => {\n    return api.get(`/rooms/${id}/`);\n  },\n  // Get room occupants\n  getRoomOccupants: async id => {\n    return api.get(`/rooms/${id}/occupants/`);\n  },\n  // Create room (admin only)\n  createRoom: async roomData => {\n    return api.post('/rooms/', roomData);\n  },\n  // Update room (admin only)\n  updateRoom: async (id, roomData) => {\n    return api.put(`/rooms/${id}/`, roomData);\n  },\n  // Delete room (admin only)\n  deleteRoom: async id => {\n    return api.delete(`/rooms/${id}/`);\n  },\n  // Get current user's occupancy\n  getCurrentUserOccupancy: async () => {\n    return api.get('/occupancies/');\n  },\n  // Get all occupancies (admin only)\n  getAllOccupancies: async () => {\n    return api.get('/occupancies/');\n  },\n  // Create occupancy (admin only)\n  createOccupancy: async occupancyData => {\n    return api.post('/occupancies/', occupancyData);\n  },\n  // Update occupancy (admin only)\n  updateOccupancy: async (id, occupancyData) => {\n    return api.put(`/occupancies/${id}/`, occupancyData);\n  },\n  // Delete occupancy (admin only)\n  deleteOccupancy: async id => {\n    return api.delete(`/occupancies/${id}/`);\n  }\n};\nexport default hostelService;","map":{"version":3,"names":["api","hostelService","getAllHostels","get","getHostelById","id","getHostelRooms","createHostel","hostelData","post","updateHostel","put","deleteHostel","delete","getAllRooms","getRoomsByHostel","hostelId","getRoomById","getRoomOccupants","createRoom","roomData","updateRoom","deleteRoom","getCurrentUserOccupancy","getAllOccupancies","createOccupancy","occupancyData","updateOccupancy","deleteOccupancy"],"sources":["C:/Vraj/Academics/2-2/DBMS/trial/campus-sphere/frontend/src/services/hostel.service.js"],"sourcesContent":["import api from './api';\r\n\r\n// Hostel service functions for API calls\r\nconst hostelService = {\r\n  // Get all hostels\r\n  getAllHostels: async () => {\r\n    return api.get('/hostels/');\r\n  },\r\n  \r\n  // Get hostel by ID\r\n  getHostelById: async (id) => {\r\n    return api.get(`/hostels/${id}/`);\r\n  },\r\n  \r\n  // Get hostel rooms\r\n  getHostelRooms: async (id) => {\r\n    return api.get(`/hostels/${id}/rooms/`);\r\n  },\r\n  \r\n  // Create hostel (admin only)\r\n  createHostel: async (hostelData) => {\r\n    return api.post('/hostels/', hostelData);\r\n  },\r\n  \r\n  // Update hostel (admin only)\r\n  updateHostel: async (id, hostelData) => {\r\n    return api.put(`/hostels/${id}/`, hostelData);\r\n  },\r\n  \r\n  // Delete hostel (admin only)\r\n  deleteHostel: async (id) => {\r\n    return api.delete(`/hostels/${id}/`);\r\n  },\r\n  \r\n  // Get all rooms\r\n  getAllRooms: async () => {\r\n    return api.get('/rooms/');\r\n  },\r\n  \r\n  // Get rooms by hostel\r\n  getRoomsByHostel: async (hostelId) => {\r\n    return api.get(`/rooms/?hostel=${hostelId}`);\r\n  },\r\n  \r\n  // Get room by ID\r\n  getRoomById: async (id) => {\r\n    return api.get(`/rooms/${id}/`);\r\n  },\r\n  \r\n  // Get room occupants\r\n  getRoomOccupants: async (id) => {\r\n    return api.get(`/rooms/${id}/occupants/`);\r\n  },\r\n  \r\n  // Create room (admin only)\r\n  createRoom: async (roomData) => {\r\n    return api.post('/rooms/', roomData);\r\n  },\r\n  \r\n  // Update room (admin only)\r\n  updateRoom: async (id, roomData) => {\r\n    return api.put(`/rooms/${id}/`, roomData);\r\n  },\r\n  \r\n  // Delete room (admin only)\r\n  deleteRoom: async (id) => {\r\n    return api.delete(`/rooms/${id}/`);\r\n  },\r\n  \r\n  // Get current user's occupancy\r\n  getCurrentUserOccupancy: async () => {\r\n    return api.get('/occupancies/');\r\n  },\r\n  \r\n  // Get all occupancies (admin only)\r\n  getAllOccupancies: async () => {\r\n    return api.get('/occupancies/');\r\n  },\r\n  \r\n  // Create occupancy (admin only)\r\n  createOccupancy: async (occupancyData) => {\r\n    return api.post('/occupancies/', occupancyData);\r\n  },\r\n  \r\n  // Update occupancy (admin only)\r\n  updateOccupancy: async (id, occupancyData) => {\r\n    return api.put(`/occupancies/${id}/`, occupancyData);\r\n  },\r\n  \r\n  // Delete occupancy (admin only)\r\n  deleteOccupancy: async (id) => {\r\n    return api.delete(`/occupancies/${id}/`);\r\n  },\r\n};\r\n\r\nexport default hostelService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA,MAAMC,aAAa,GAAG;EACpB;EACAC,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,OAAOF,GAAG,CAACG,GAAG,CAAC,WAAW,CAAC;EAC7B,CAAC;EAED;EACAC,aAAa,EAAE,MAAOC,EAAE,IAAK;IAC3B,OAAOL,GAAG,CAACG,GAAG,CAAC,YAAYE,EAAE,GAAG,CAAC;EACnC,CAAC;EAED;EACAC,cAAc,EAAE,MAAOD,EAAE,IAAK;IAC5B,OAAOL,GAAG,CAACG,GAAG,CAAC,YAAYE,EAAE,SAAS,CAAC;EACzC,CAAC;EAED;EACAE,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,OAAOR,GAAG,CAACS,IAAI,CAAC,WAAW,EAAED,UAAU,CAAC;EAC1C,CAAC;EAED;EACAE,YAAY,EAAE,MAAAA,CAAOL,EAAE,EAAEG,UAAU,KAAK;IACtC,OAAOR,GAAG,CAACW,GAAG,CAAC,YAAYN,EAAE,GAAG,EAAEG,UAAU,CAAC;EAC/C,CAAC;EAED;EACAI,YAAY,EAAE,MAAOP,EAAE,IAAK;IAC1B,OAAOL,GAAG,CAACa,MAAM,CAAC,YAAYR,EAAE,GAAG,CAAC;EACtC,CAAC;EAED;EACAS,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,OAAOd,GAAG,CAACG,GAAG,CAAC,SAAS,CAAC;EAC3B,CAAC;EAED;EACAY,gBAAgB,EAAE,MAAOC,QAAQ,IAAK;IACpC,OAAOhB,GAAG,CAACG,GAAG,CAAC,kBAAkBa,QAAQ,EAAE,CAAC;EAC9C,CAAC;EAED;EACAC,WAAW,EAAE,MAAOZ,EAAE,IAAK;IACzB,OAAOL,GAAG,CAACG,GAAG,CAAC,UAAUE,EAAE,GAAG,CAAC;EACjC,CAAC;EAED;EACAa,gBAAgB,EAAE,MAAOb,EAAE,IAAK;IAC9B,OAAOL,GAAG,CAACG,GAAG,CAAC,UAAUE,EAAE,aAAa,CAAC;EAC3C,CAAC;EAED;EACAc,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC9B,OAAOpB,GAAG,CAACS,IAAI,CAAC,SAAS,EAAEW,QAAQ,CAAC;EACtC,CAAC;EAED;EACAC,UAAU,EAAE,MAAAA,CAAOhB,EAAE,EAAEe,QAAQ,KAAK;IAClC,OAAOpB,GAAG,CAACW,GAAG,CAAC,UAAUN,EAAE,GAAG,EAAEe,QAAQ,CAAC;EAC3C,CAAC;EAED;EACAE,UAAU,EAAE,MAAOjB,EAAE,IAAK;IACxB,OAAOL,GAAG,CAACa,MAAM,CAAC,UAAUR,EAAE,GAAG,CAAC;EACpC,CAAC;EAED;EACAkB,uBAAuB,EAAE,MAAAA,CAAA,KAAY;IACnC,OAAOvB,GAAG,CAACG,GAAG,CAAC,eAAe,CAAC;EACjC,CAAC;EAED;EACAqB,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,OAAOxB,GAAG,CAACG,GAAG,CAAC,eAAe,CAAC;EACjC,CAAC;EAED;EACAsB,eAAe,EAAE,MAAOC,aAAa,IAAK;IACxC,OAAO1B,GAAG,CAACS,IAAI,CAAC,eAAe,EAAEiB,aAAa,CAAC;EACjD,CAAC;EAED;EACAC,eAAe,EAAE,MAAAA,CAAOtB,EAAE,EAAEqB,aAAa,KAAK;IAC5C,OAAO1B,GAAG,CAACW,GAAG,CAAC,gBAAgBN,EAAE,GAAG,EAAEqB,aAAa,CAAC;EACtD,CAAC;EAED;EACAE,eAAe,EAAE,MAAOvB,EAAE,IAAK;IAC7B,OAAOL,GAAG,CAACa,MAAM,CAAC,gBAAgBR,EAAE,GAAG,CAAC;EAC1C;AACF,CAAC;AAED,eAAeJ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}