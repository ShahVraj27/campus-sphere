{"ast":null,"code":"import api from './api';\n\n// Friend service functions for API calls\nconst friendService = {\n  // Get current user's friends\n  getUserFriends: async () => {\n    return api.get('/friends/my_friends/');\n  },\n  // Get all friendships (admin only)\n  getAllFriendships: async () => {\n    return api.get('/friends/');\n  },\n  // Get friendship by ID\n  getFriendshipById: async id => {\n    return api.get(`/friends/${id}/`);\n  },\n  // Create friendship (admin only)\n  createFriendship: async friendshipData => {\n    return api.post('/friends/', friendshipData);\n  },\n  // Delete friendship (admin only)\n  deleteFriendship: async id => {\n    return api.delete(`/friends/${id}/`);\n  },\n  // Get sent friend requests\n  getSentFriendRequests: async () => {\n    return api.get('/friend-requests/sent/');\n  },\n  // Get received friend requests\n  getReceivedFriendRequests: async () => {\n    return api.get('/friend-requests/received/');\n  },\n  // Get all friend requests (admin only)\n  getAllFriendRequests: async () => {\n    return api.get('/friend-requests/');\n  },\n  // Get friend request by ID\n  getFriendRequestById: async id => {\n    return api.get(`/friend-requests/${id}/`);\n  },\n  // Send friend request\n  sendFriendRequest: async receiverId => {\n    return api.post('/friend-requests/', {\n      receiver_id: receiverId\n    });\n  },\n  // Accept friend request\n  acceptFriendRequest: async id => {\n    return api.post(`/friend-requests/${id}/accept/`);\n  },\n  // Reject friend request\n  rejectFriendRequest: async id => {\n    return api.post(`/friend-requests/${id}/reject/`);\n  },\n  // Cancel friend request\n  cancelFriendRequest: async id => {\n    return api.delete(`/friend-requests/${id}/`);\n  }\n};\nexport default friendService;","map":{"version":3,"names":["api","friendService","getUserFriends","get","getAllFriendships","getFriendshipById","id","createFriendship","friendshipData","post","deleteFriendship","delete","getSentFriendRequests","getReceivedFriendRequests","getAllFriendRequests","getFriendRequestById","sendFriendRequest","receiverId","receiver_id","acceptFriendRequest","rejectFriendRequest","cancelFriendRequest"],"sources":["C:/Vraj/Academics/2-2/DBMS/trial/campus-sphere/frontend/src/services/friend.service.js"],"sourcesContent":["import api from './api';\r\n\r\n// Friend service functions for API calls\r\nconst friendService = {\r\n  // Get current user's friends\r\n  getUserFriends: async () => {\r\n    return api.get('/friends/my_friends/');\r\n  },\r\n  \r\n  // Get all friendships (admin only)\r\n  getAllFriendships: async () => {\r\n    return api.get('/friends/');\r\n  },\r\n  \r\n  // Get friendship by ID\r\n  getFriendshipById: async (id) => {\r\n    return api.get(`/friends/${id}/`);\r\n  },\r\n  \r\n  // Create friendship (admin only)\r\n  createFriendship: async (friendshipData) => {\r\n    return api.post('/friends/', friendshipData);\r\n  },\r\n  \r\n  // Delete friendship (admin only)\r\n  deleteFriendship: async (id) => {\r\n    return api.delete(`/friends/${id}/`);\r\n  },\r\n  \r\n  // Get sent friend requests\r\n  getSentFriendRequests: async () => {\r\n    return api.get('/friend-requests/sent/');\r\n  },\r\n  \r\n  // Get received friend requests\r\n  getReceivedFriendRequests: async () => {\r\n    return api.get('/friend-requests/received/');\r\n  },\r\n  \r\n  // Get all friend requests (admin only)\r\n  getAllFriendRequests: async () => {\r\n    return api.get('/friend-requests/');\r\n  },\r\n  \r\n  // Get friend request by ID\r\n  getFriendRequestById: async (id) => {\r\n    return api.get(`/friend-requests/${id}/`);\r\n  },\r\n  \r\n  // Send friend request\r\n  sendFriendRequest: async (receiverId) => {\r\n    return api.post('/friend-requests/', { receiver_id: receiverId });\r\n  },\r\n  \r\n  // Accept friend request\r\n  acceptFriendRequest: async (id) => {\r\n    return api.post(`/friend-requests/${id}/accept/`);\r\n  },\r\n  \r\n  // Reject friend request\r\n  rejectFriendRequest: async (id) => {\r\n    return api.post(`/friend-requests/${id}/reject/`);\r\n  },\r\n  \r\n  // Cancel friend request\r\n  cancelFriendRequest: async (id) => {\r\n    return api.delete(`/friend-requests/${id}/`);\r\n  },\r\n};\r\n\r\nexport default friendService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA,MAAMC,aAAa,GAAG;EACpB;EACAC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,OAAOF,GAAG,CAACG,GAAG,CAAC,sBAAsB,CAAC;EACxC,CAAC;EAED;EACAC,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,OAAOJ,GAAG,CAACG,GAAG,CAAC,WAAW,CAAC;EAC7B,CAAC;EAED;EACAE,iBAAiB,EAAE,MAAOC,EAAE,IAAK;IAC/B,OAAON,GAAG,CAACG,GAAG,CAAC,YAAYG,EAAE,GAAG,CAAC;EACnC,CAAC;EAED;EACAC,gBAAgB,EAAE,MAAOC,cAAc,IAAK;IAC1C,OAAOR,GAAG,CAACS,IAAI,CAAC,WAAW,EAAED,cAAc,CAAC;EAC9C,CAAC;EAED;EACAE,gBAAgB,EAAE,MAAOJ,EAAE,IAAK;IAC9B,OAAON,GAAG,CAACW,MAAM,CAAC,YAAYL,EAAE,GAAG,CAAC;EACtC,CAAC;EAED;EACAM,qBAAqB,EAAE,MAAAA,CAAA,KAAY;IACjC,OAAOZ,GAAG,CAACG,GAAG,CAAC,wBAAwB,CAAC;EAC1C,CAAC;EAED;EACAU,yBAAyB,EAAE,MAAAA,CAAA,KAAY;IACrC,OAAOb,GAAG,CAACG,GAAG,CAAC,4BAA4B,CAAC;EAC9C,CAAC;EAED;EACAW,oBAAoB,EAAE,MAAAA,CAAA,KAAY;IAChC,OAAOd,GAAG,CAACG,GAAG,CAAC,mBAAmB,CAAC;EACrC,CAAC;EAED;EACAY,oBAAoB,EAAE,MAAOT,EAAE,IAAK;IAClC,OAAON,GAAG,CAACG,GAAG,CAAC,oBAAoBG,EAAE,GAAG,CAAC;EAC3C,CAAC;EAED;EACAU,iBAAiB,EAAE,MAAOC,UAAU,IAAK;IACvC,OAAOjB,GAAG,CAACS,IAAI,CAAC,mBAAmB,EAAE;MAAES,WAAW,EAAED;IAAW,CAAC,CAAC;EACnE,CAAC;EAED;EACAE,mBAAmB,EAAE,MAAOb,EAAE,IAAK;IACjC,OAAON,GAAG,CAACS,IAAI,CAAC,oBAAoBH,EAAE,UAAU,CAAC;EACnD,CAAC;EAED;EACAc,mBAAmB,EAAE,MAAOd,EAAE,IAAK;IACjC,OAAON,GAAG,CAACS,IAAI,CAAC,oBAAoBH,EAAE,UAAU,CAAC;EACnD,CAAC;EAED;EACAe,mBAAmB,EAAE,MAAOf,EAAE,IAAK;IACjC,OAAON,GAAG,CAACW,MAAM,CAAC,oBAAoBL,EAAE,GAAG,CAAC;EAC9C;AACF,CAAC;AAED,eAAeL,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}