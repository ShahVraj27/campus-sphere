{"ast":null,"code":"import api from'./api';// Friend service functions for API calls\nconst friendService={// Get current user's friends\ngetUserFriends:async()=>{return api.get('/friends/my_friends/');},// Get all friendships (admin only)\ngetAllFriendships:async()=>{return api.get('/friends/');},// Get friendship by ID\ngetFriendshipById:async id=>{return api.get(`/friends/${id}/`);},// Create friendship (admin only)\ncreateFriendship:async friendshipData=>{return api.post('/friends/',friendshipData);},// Delete friendship (admin only)\ndeleteFriendship:async id=>{return api.delete(`/friends/${id}/`);},// Get sent friend requests\ngetSentFriendRequests:async()=>{return api.get('/friend-requests/sent/');},// Get received friend requests\ngetReceivedFriendRequests:async()=>{return api.get('/friend-requests/received/');},// Get all friend requests (admin only)\ngetAllFriendRequests:async()=>{return api.get('/friend-requests/');},// Get friend request by ID\ngetFriendRequestById:async id=>{return api.get(`/friend-requests/${id}/`);},// Send friend request\nsendFriendRequest:async receiverId=>{return api.post('/friend-requests/',{receiver_id:receiverId});},// Accept friend request\nacceptFriendRequest:async id=>{return api.post(`/friend-requests/${id}/accept/`);},// Reject friend request\nrejectFriendRequest:async id=>{return api.post(`/friend-requests/${id}/reject/`);},// Cancel friend request\ncancelFriendRequest:async id=>{return api.delete(`/friend-requests/${id}/`);}};export default friendService;","map":{"version":3,"names":["api","friendService","getUserFriends","get","getAllFriendships","getFriendshipById","id","createFriendship","friendshipData","post","deleteFriendship","delete","getSentFriendRequests","getReceivedFriendRequests","getAllFriendRequests","getFriendRequestById","sendFriendRequest","receiverId","receiver_id","acceptFriendRequest","rejectFriendRequest","cancelFriendRequest"],"sources":["C:/Vraj/Academics/2-2/DBMS/trial/campus-sphere/frontend/src/services/friend.service.js"],"sourcesContent":["import api from './api';\r\n\r\n// Friend service functions for API calls\r\nconst friendService = {\r\n  // Get current user's friends\r\n  getUserFriends: async () => {\r\n    return api.get('/friends/my_friends/');\r\n  },\r\n  \r\n  // Get all friendships (admin only)\r\n  getAllFriendships: async () => {\r\n    return api.get('/friends/');\r\n  },\r\n  \r\n  // Get friendship by ID\r\n  getFriendshipById: async (id) => {\r\n    return api.get(`/friends/${id}/`);\r\n  },\r\n  \r\n  // Create friendship (admin only)\r\n  createFriendship: async (friendshipData) => {\r\n    return api.post('/friends/', friendshipData);\r\n  },\r\n  \r\n  // Delete friendship (admin only)\r\n  deleteFriendship: async (id) => {\r\n    return api.delete(`/friends/${id}/`);\r\n  },\r\n  \r\n  // Get sent friend requests\r\n  getSentFriendRequests: async () => {\r\n    return api.get('/friend-requests/sent/');\r\n  },\r\n  \r\n  // Get received friend requests\r\n  getReceivedFriendRequests: async () => {\r\n    return api.get('/friend-requests/received/');\r\n  },\r\n  \r\n  // Get all friend requests (admin only)\r\n  getAllFriendRequests: async () => {\r\n    return api.get('/friend-requests/');\r\n  },\r\n  \r\n  // Get friend request by ID\r\n  getFriendRequestById: async (id) => {\r\n    return api.get(`/friend-requests/${id}/`);\r\n  },\r\n  \r\n  // Send friend request\r\n  sendFriendRequest: async (receiverId) => {\r\n    return api.post('/friend-requests/', { receiver_id: receiverId });\r\n  },\r\n  \r\n  // Accept friend request\r\n  acceptFriendRequest: async (id) => {\r\n    return api.post(`/friend-requests/${id}/accept/`);\r\n  },\r\n  \r\n  // Reject friend request\r\n  rejectFriendRequest: async (id) => {\r\n    return api.post(`/friend-requests/${id}/reject/`);\r\n  },\r\n  \r\n  // Cancel friend request\r\n  cancelFriendRequest: async (id) => {\r\n    return api.delete(`/friend-requests/${id}/`);\r\n  },\r\n};\r\n\r\nexport default friendService;"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAEvB;AACA,KAAM,CAAAC,aAAa,CAAG,CACpB;AACAC,cAAc,CAAE,KAAAA,CAAA,GAAY,CAC1B,MAAO,CAAAF,GAAG,CAACG,GAAG,CAAC,sBAAsB,CAAC,CACxC,CAAC,CAED;AACAC,iBAAiB,CAAE,KAAAA,CAAA,GAAY,CAC7B,MAAO,CAAAJ,GAAG,CAACG,GAAG,CAAC,WAAW,CAAC,CAC7B,CAAC,CAED;AACAE,iBAAiB,CAAE,KAAO,CAAAC,EAAE,EAAK,CAC/B,MAAO,CAAAN,GAAG,CAACG,GAAG,CAAC,YAAYG,EAAE,GAAG,CAAC,CACnC,CAAC,CAED;AACAC,gBAAgB,CAAE,KAAO,CAAAC,cAAc,EAAK,CAC1C,MAAO,CAAAR,GAAG,CAACS,IAAI,CAAC,WAAW,CAAED,cAAc,CAAC,CAC9C,CAAC,CAED;AACAE,gBAAgB,CAAE,KAAO,CAAAJ,EAAE,EAAK,CAC9B,MAAO,CAAAN,GAAG,CAACW,MAAM,CAAC,YAAYL,EAAE,GAAG,CAAC,CACtC,CAAC,CAED;AACAM,qBAAqB,CAAE,KAAAA,CAAA,GAAY,CACjC,MAAO,CAAAZ,GAAG,CAACG,GAAG,CAAC,wBAAwB,CAAC,CAC1C,CAAC,CAED;AACAU,yBAAyB,CAAE,KAAAA,CAAA,GAAY,CACrC,MAAO,CAAAb,GAAG,CAACG,GAAG,CAAC,4BAA4B,CAAC,CAC9C,CAAC,CAED;AACAW,oBAAoB,CAAE,KAAAA,CAAA,GAAY,CAChC,MAAO,CAAAd,GAAG,CAACG,GAAG,CAAC,mBAAmB,CAAC,CACrC,CAAC,CAED;AACAY,oBAAoB,CAAE,KAAO,CAAAT,EAAE,EAAK,CAClC,MAAO,CAAAN,GAAG,CAACG,GAAG,CAAC,oBAAoBG,EAAE,GAAG,CAAC,CAC3C,CAAC,CAED;AACAU,iBAAiB,CAAE,KAAO,CAAAC,UAAU,EAAK,CACvC,MAAO,CAAAjB,GAAG,CAACS,IAAI,CAAC,mBAAmB,CAAE,CAAES,WAAW,CAAED,UAAW,CAAC,CAAC,CACnE,CAAC,CAED;AACAE,mBAAmB,CAAE,KAAO,CAAAb,EAAE,EAAK,CACjC,MAAO,CAAAN,GAAG,CAACS,IAAI,CAAC,oBAAoBH,EAAE,UAAU,CAAC,CACnD,CAAC,CAED;AACAc,mBAAmB,CAAE,KAAO,CAAAd,EAAE,EAAK,CACjC,MAAO,CAAAN,GAAG,CAACS,IAAI,CAAC,oBAAoBH,EAAE,UAAU,CAAC,CACnD,CAAC,CAED;AACAe,mBAAmB,CAAE,KAAO,CAAAf,EAAE,EAAK,CACjC,MAAO,CAAAN,GAAG,CAACW,MAAM,CAAC,oBAAoBL,EAAE,GAAG,CAAC,CAC9C,CACF,CAAC,CAED,cAAe,CAAAL,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}