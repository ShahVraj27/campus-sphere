{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add a response interceptor to handle token refresh\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // If error is 401 and not a retry, attempt to refresh token\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        // No refresh token, logout\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        return Promise.reject(error);\n      }\n\n      // Attempt to refresh token\n      const response = await axios.post(`${api.defaults.baseURL}/auth/token/refresh/`, {\n        refresh: refreshToken\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const newAccessToken = response.data.access;\n      localStorage.setItem('accessToken', newAccessToken);\n\n      // Retry original request with new token\n      originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n      return axios(originalRequest);\n    } catch (refreshError) {\n      // Refresh failed, logout\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","removeItem","post","defaults","refresh","newAccessToken","data","access","setItem","refreshError"],"sources":["C:/Vraj/Academics/2-2/DBMS/trial/campus-sphere/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor to add auth token to requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add a response interceptor to handle token refresh\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // If error is 401 and not a retry, attempt to refresh token\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        if (!refreshToken) {\r\n          // No refresh token, logout\r\n          localStorage.removeItem('accessToken');\r\n          localStorage.removeItem('refreshToken');\r\n          return Promise.reject(error);\r\n        }\r\n        \r\n        // Attempt to refresh token\r\n        const response = await axios.post(\r\n          `${api.defaults.baseURL}/auth/token/refresh/`,\r\n          { refresh: refreshToken },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n        \r\n        const newAccessToken = response.data.access;\r\n        localStorage.setItem('accessToken', newAccessToken);\r\n        \r\n        // Retry original request with new token\r\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n        return axios(originalRequest);\r\n      } catch (refreshError) {\r\n        // Refresh failed, logout\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('refreshToken');\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EACrEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAf,GAAG,CAACO,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;;EAEpC;EACA,IAAIK,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF,MAAMC,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,IAAI,CAACS,YAAY,EAAE;QACjB;QACAV,YAAY,CAACW,UAAU,CAAC,aAAa,CAAC;QACtCX,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC;QACvC,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;MAC9B;;MAEA;MACA,MAAMG,QAAQ,GAAG,MAAMnB,KAAK,CAACyB,IAAI,CAC/B,GAAGxB,GAAG,CAACyB,QAAQ,CAACvB,OAAO,sBAAsB,EAC7C;QAAEwB,OAAO,EAAEJ;MAAa,CAAC,EACzB;QAAEhB,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAAE,CACpD,CAAC;MAED,MAAMqB,cAAc,GAAGT,QAAQ,CAACU,IAAI,CAACC,MAAM;MAC3CjB,YAAY,CAACkB,OAAO,CAAC,aAAa,EAAEH,cAAc,CAAC;;MAEnD;MACAR,eAAe,CAACb,OAAO,CAACQ,aAAa,GAAG,UAAUa,cAAc,EAAE;MAClE,OAAO5B,KAAK,CAACoB,eAAe,CAAC;IAC/B,CAAC,CAAC,OAAOY,YAAY,EAAE;MACrB;MACAnB,YAAY,CAACW,UAAU,CAAC,aAAa,CAAC;MACtCX,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC;MACvC,OAAOP,OAAO,CAACC,MAAM,CAACc,YAAY,CAAC;IACrC;EACF;EAEA,OAAOf,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}